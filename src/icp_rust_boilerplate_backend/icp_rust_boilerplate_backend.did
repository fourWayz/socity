type Error = variant {
  InvalidAction : record { msg : text };
  NotFound : record { msg : text };
  NotAuthorized : record { msg : text; caller : principal };
};
type Result = variant { Ok : Task; Err : Error };
type Result_1 = variant { Ok : vec Task; Err : Error };
type Task = record {
  id : nat64;
  title : text;
  updated_at : opt nat64;
  owner : principal;
  completed : bool;
  description : text;
  deadline : opt nat64;
  created_at : nat64;
  completed_late : bool;
};
type TaskPayload = record {
  title : text;
  description : text;
  deadline : opt nat64;
};
service : {
  add_task : (TaskPayload) -> (opt Task);
  complete_task : (nat64) -> (Result);
  delete_task : (nat64) -> (Result);
  get_all_tasks : () -> (Result_1) query;
  get_completed_tasks : () -> (Result_1) query;
  get_task : (nat64) -> (Result) query;
  update_task : (nat64, TaskPayload) -> (Result);
}
